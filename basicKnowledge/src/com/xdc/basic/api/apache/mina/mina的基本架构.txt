在图中的模块链中，IoService 便是应用程序的入口，相当于我们前面代码中的 IoAccepter，IoAccepter 便是 IoService 的一个扩展接口。IoService 接口可以用来添加多个 IoFilter，这些 IoFilter 符合责任链模式并由 IoProcessor 线程负责调用。而 IoAccepter 在 ioService 接口的基础上还提供绑定某个通讯端口以及取消绑定的接口。ioHandler则为应用逻辑处理类。

主要类以及接口：

(1.)IoService：这个接口在一个线程上负责套接字的建立，拥有自己的Selector，监

听是否有连接被建立。

(2.)IoProcessor：这个接口在另一个线程上负责检查是否有数据在通道上读写，也就是

说它也拥有自己的Selector，这是与我们使用JAVA NIO编码时的一个不同之处，

通常在JAVA NIO编码中，我们都是使用一个Selector，也就是不区分IoService

与IoProcessor两个功能接口。另外，IoProcessor负责调用注册在IoService上

的过滤器，并在过滤器链之后调用IoHandler。

(3.)IoFilter：这个接口定义一组拦截器，这些拦截器可以包括日志输出、黑名单过滤、

数据的编码（write方向）与解码（read方向）等功能，其中数据的encode与decode

是最为重要的、也是你在使用Mina时最主要关注的地方。

(4.)IoHandler：这个接口负责编写业务逻辑，也就是接收、发送数据的地方。

(5.)IoSession:Session可以理解为服务器与客户端的特定连接，该连接由服务器地址、端口以及客户端地址、端口来决定。客户端发起请求时，指定服务器地址和端口，客户端也会指定或者根据网络路由信息自动指定一个地址、自动分配一个端口。这个地址、端口对构成一个Session。Session是服务器端对这种连接的抽象，MINA对其进行了封装，定义了IoSession接口，用来代表客户端与服务器的连接，在服务器端来指代客户端，实现对客户端的操作、绑定与客户端有关的信息与对象。通过利用Session的这个概念，编写程序时就可以在服务器端非常方便地区分出是当前处理的是哪个客户端的请求、维持客户端的状态信息、可以实现客户端之间相互通讯。

