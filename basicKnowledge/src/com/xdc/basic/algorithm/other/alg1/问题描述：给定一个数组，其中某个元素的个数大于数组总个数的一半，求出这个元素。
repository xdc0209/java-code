摘自：2017年搜狐内推 面试题——谈谈面试中的算法 >>>>> http://blog.csdn.net/versencoder/article/details/52099391

问题描述：
给定一个数组，其中某个元素的个数大于数组总个数的一半，求出这个元素。

解决思路：
方法一：先对数组排序，然后找到中间的那个数字，一定就是我们要找的元素。如果使用快速排序的话，该算法的平均时间复杂度为O(nlogn)，空间复杂度为O(1)。
方法二：用HashMap去解决，key存放元素，value存放个数，如果个数超过一般，输出这个元素。该算法时复杂度为O(n)，空间复杂度为O(n)。
方法三：这里有一种时间复杂度为O(n)，空间复杂度为O(1)的算法，主要思想如下：采用阵地攻守的思想：第一个数字作为第一个士兵，守阵地，count = 1；遇到相同元素，count++；遇到不相同元素，即为敌人，同归于尽，count--；当遇到count为0的情况，又以新的i值作为守阵地的士兵，继续下去，到最后还留在阵地上的士兵，就是要找主元素。

