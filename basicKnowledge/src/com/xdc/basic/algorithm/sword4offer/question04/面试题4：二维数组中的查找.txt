摘自：《剑指offer(第2版)》 >>> 面试题4：二维数组中的查找
摘自：二维数组中的查找 >>> https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking

问题描述：
在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

解题思路一：
把每一行看成有序递增的数组，利用二分查找，通过遍历每一行得到答案，时间复杂度是O(mlogn)。

解题思路二：
在草纸上简单分析，从二维数组内部选择一个元素，画出以此为原点的直角坐标，在X负~Y正(包括坐标轴上的点)象限内的值都小于原点值，在X正~Y负(包括坐标轴上的点)象限内的值都大于原点值，在X正~Y正(不包括坐标轴上的点)象限内的值可能大于可能小于原点值，在X负~Y负(不包括坐标轴上的点)象限内的值可能大于可能小于原点值，这时问题就复杂了，很难找到一种规律去简单的缩小搜索范围。但是如果把原点选在左下角或者是右上角，你会发现象限就剩一个了，而且坐标轴上的上的值特征明显。以左下角为例，Y正上的值都比原点小，X正上的值都比原点大，好了，这时想想搜索吧，如果待搜索的值等于原点，搜索完成，如果比原点小，那么X轴既可可被排除掉，即原点所在行可被排除掉，此时原点上移一位，建立新的坐标系，如果比原点大，同理可排除一列，此时原点右移一位，建立新的坐标系。
总结就是：从左下角搜索，遇大上移，遇小右移。从右上角同理，但是从左上角或右下角确是不行的，因为不能缩小搜索范围。此算法的时间复杂度O(m+n)。
另外：二维数组并不是一个严格的矩阵，需要考虑不等长的问题。可能题目中"每一列都按照从上到下递增的顺序排序"的这句话预示着数组是一个矩阵，但是为了增强程序的鲁棒性，实现代码中考虑了不等长的情形。考虑到不等长的问题，试着写写代码，你会发现左下角比右上角更好实现。

