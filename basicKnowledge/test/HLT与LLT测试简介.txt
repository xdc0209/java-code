摘自：http://blog.csdn.net/owen0278/article/details/7730594


HLT：HIGH LEVEL TEST
HLT自动化测试是站在系统的角度对整个版本进行的测试，它测试的对象是一个完整的产品而不是产品内部的模块，关注的是产品外部的可见属性。通常使用黑盒测试技术，常见的HLT包括系统测试与验收测试。
HLT通常指SDV/SIT/SVT等测试活动：
SDV: system design verification 系统设计验证
SIT: system integration test    系统集成测试
SVT: system verification test   系统验证测试

主要有两个工具：持续集成工具和自动化执行工具。
持续集成工具主要完成代码的静态检查、自动编译、快速反馈、自动化发布等功能。
自动化执行工具主要负责HLT测试用例管理、HLT测试环境配置以及自动化测试执行等。

CMC HLT测试：
每天晚上11点，持续集成工具会自动获取最新的代码，自动编译版本，自动安装环境并打好适配包，然后通知HLT执行机下载并安装客户端，HLT用例执行。


LLT：LOW LEVER TEST
LLT测试系统的部分，不是一个完整的产品。需要掌握软件内部结构，主要使用白盒的测试方法。通常由开发人员实施，常见的LLT包括UT与IT。
它包括单元测试（Unit Test）、集成测试（Integration Test）、模块系统测试（Module System Test）、系统集成测试（BBIT），
项目组可自行决定采用以上一种或多种来保障语句的覆盖率。LLT是在开发阶段对系统进行尽早、尽快的验证，发现的缺陷也更容易定位和解决。

在开发任务紧急的情况下,LLT会被认为是一个很大的压力。
开发任务如果按照正常的进度进行，LLT可以使开发者更早发现问题，除去工具本身的效能，在写LLT用例过程中，可以使开发者换一个角度来思考代码的正确性，这个过程本身会发现很多低级问题。
而不至于将低级问题都转移到测试部，浪费测试部大部分的时间和精力及测试指标，而另外需要深度挖掘的隐藏深的问题却没有时间和精力对付。


LLT和开发自测试的区别：
（1）LLT是相对于HLT的，主要指单元和模块级的测试，涵盖测试分层中的UT和MST两层，网络对LLT有持续集成、代码覆盖率等要求；
（2）开发自测试是一个泛称，即开发团队在转测试前开展的各类测试行为，其测试内容既包括LLT的，也包括HLT的；
（3）从责任来看，LLT和开发自测试的责任主体都是开发团队；
（4）因此，做了开发自测试，并不意味着做了LLT；LLT没做好，开发自测试肯定没做好；要做好开发自测试，首先必须做好LLT，其次还应该做一部分基本的HLT（可以直接取部分系统测试用例进行测试）。

按业界数据统计，静态测试+LLT可以发现产品85%的缺陷，但我们当前很少有产品能够做到，把问题和压力都积压到了HLT，导致缺陷成本陡增。

