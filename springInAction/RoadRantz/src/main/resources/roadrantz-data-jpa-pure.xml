<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.springframework.org/schema/beans 
               http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
       
  <!-- 
    A JpaTemplate, as discussed in section 5.5.1, page 194
   -->
  <bean id="jpaTemplate"
      class="org.springframework.orm.jpa.JpaTemplate">
    <property name="entityManagerFactory" ref="entityManagerFactory" />
  </bean>

  <!-- 
     This is the bean declaration that was started in Listing 5.9 with the
     injection of the persistenceUnitName property.
   -->
  <bean id="entityManagerFactory"
      class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
    
    <property name="persistenceUnitName" value="rantzPU" />
      
    <property name="jpaVendorAdapter">
        <bean
          class="org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter">
            <property name="databasePlatform"
             value="oracle.toplink.essentials.platform.database.HSQLPlatform"/>
            <property name="generateDdl" value="true"/>
            <property name="showSql" value="true" />
        </bean>
    </property>
      
    <property name="jpaProperties">
      <props>
        <prop key="toplink.jdbc.driver">${db.driver}</prop>
        <prop key="toplink.jdbc.url">${db.url}</prop>
        <prop key="toplink.jdbc.user">${db.username}</prop>
        <prop key="toplink.jdbc.password">${db.password}</prop>
        <prop key="toplink.logging.level">INFO</prop>
        <prop key="toplink.target-database">HSQL</prop>
      </props>
    </property>
    
    <property name="persistenceProviderClass"
        value="oracle.toplink.essentials.PersistenceProvider" />
  </bean>
  
  <!-- 
    This is the LocalContainerEntityManagerFactoryBean that was defined
    in Listing 5.10
   -->
  <!-- 
  <bean id="entityManagerFactory" 
      class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">

    <property name="dataSource" ref="dataSource" />
      
    <property name="loadTimeWeaver">
      <bean class="org.springframework.instrument.classloading.SimpleLoadTimeWeaver" /> 
    </property>

    <property name="jpaVendorAdapter">
      <bean class=
          "org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter">
        <property name="showSql" value="true"/>
        <property name="generateDdl" value="true"/>
        <property name="databasePlatform" value=
            "oracle.toplink.essentials.platform.database.HSQLPlatform"/>
      </bean>
    </property>
  </bean>
  -->
  
  <!-- 
    The JpaRantDao in a pure form (e.g., it doesn't extend or implement
    any Spring-specific class/interfaces). 
    
     Upon looking back at the book, I discovered that I don't discuss this
     implementation at all in the book. That's unfortunate, since the Pure JPA
     approach is considered the preferred approach to using JPA in Spring.
     Nevertheless, here's the implementation for your enjoyment.
    -->
  <bean id="rantDao" class="com.roadrantz.dao.jpa.PureJpaRantDao" />
  
  
  <!-- 
    A JPA-based transaction manager, as described in section 6.2.3, page 228.
   -->
  <bean id="transactionManager" 
      class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory"
        ref="entityManagerFactory" />
  </bean>

  <!-- Tells Spring how to convert JPA-specific exceptions
       to Spring data exceptions for classes that are annotated
       with @Repository. -->
  <bean class=
      "org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

  <!-- Tells Spring to inject the entity manager into
       DAO classes with a @PersistenceContext annotation
       placed on a setEntityManager() method. -->
  <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
  
</beans>
