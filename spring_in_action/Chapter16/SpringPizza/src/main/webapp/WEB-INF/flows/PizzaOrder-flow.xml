<?xml version="1.0" encoding="UTF-8"?>

<!-- 
  Complete flow definition, as shown in listing 15.6. But then is torn apart
  as the customer and pizza portions are refactored into subflows.
 -->
<flow xmlns=
        "http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation=
        "http://www.springframework.org/schema/webflow
        http://www.springframework.org/schema/webflow/spring-webflow-1.0.xsd">

  <var name="order" 
      class="com.springinaction.pizza.domain.Order" 
      scope="flow"/>
      
  <start-state idref="askForPhoneNumber"  />

  <view-state id="askForPhoneNumber" 
      view="phoneNumberForm">
    <transition on="submit" to="lookupCustomer" />
  </view-state>

  <action-state id="lookupCustomer">
    <action bean="lookupCustomerAction" />
    
    <transition on="success" 
        to="checkDeliveryArea" /> <!-- Added on page 613 -->
        
    <transition on-exception=
        "com.springinaction.pizza.service.CustomerNotFoundException" 
        to="addNewCustomer" />
  </action-state>

  <view-state id="addNewCustomer" view="newCustomerForm">
    <render-actions>
      <action bean="customerFormAction" 
          method="setupForm"/>
    </render-actions>
    <transition on="submit" to="checkDeliveryArea"> <!-- Added on page 613 -->
      <action bean="customerFormAction" method="bind" />
      <evaluate-action expression=
          "flowScope.order.setCustomer(requestScope.customer)" />
    </transition>
  </view-state>

  <!-- 
    Decision state to decide if the customer is in the delivery area
    
    As shown on page 612
   -->
  <decision-state id="checkDeliveryArea">
    <if test="${flowScope.order.customer.inDeliveryArea}" 
        then="showOrder" 
        else="warnNoDeliveryAvailable"/>
  </decision-state>

  <!-- 
    View state to warn the customer that delivery is not available and
    that their order will only be available for take-out.
    
    As shown on page 613
   -->
  <view-state id="warnNoDeliveryAvailable"
      view="deliveryWarning">
    <transition on="continue" to="showOrder" />
    <transition on="cancel" to="finish" />
  </view-state>


    
  <view-state id="showOrder" view="orderDetails">
    <transition on="addPizza" to="addPizza" />
    <transition on="continue" to="takePayment" />
  </view-state>
  
  <!-- 
    View state for prompting a user for a pizza selection.
    
    Shown on page 604
   -->
  <view-state id="addPizza" view="newPizzaForm">
    <render-actions>
      <action bean="pizzaFormAction" method="setupForm"/>
    </render-actions>
    <transition on="submit" to="showOrder">
      <action bean="pizzaFormAction" method="bind" />
      <evaluate-action expression=
          "flowScope.order.addPizza(requestScope.pizza)" />
    </transition>
  </view-state>
  
  <!-- 
    View state to take payment info from a customer.
    
    Shown on pages 605-606
   -->
  <view-state id="takePayment" view="paymentForm">
    <transition on="submit" to="submitOrder">
      <bean-action bean="paymentProcessor" 
          method="approveCreditCard">
        <method-arguments>
          <argument expression=
              "${requestParameters.creditCardNumber}"/>
          <argument expression=
              "${requestParameters.expirationMonth}"/>
          <argument expression=
              "${requestParameters.expirationYear}"/>
          <argument expression=
              "${flowScope.order.total}" />
        </method-arguments>
      </bean-action>
    </transition>
    
    <transition 
      on-exception="com.springinaction.pizza.PaymentException"
      to="takePayment" />
  </view-state>

  <!-- 
    Action state to submit the order to the order service.
    
    As shown on page 607
   -->  
  <action-state id="submitOrder">
    <bean-action bean="orderService" method="saveOrder">
      <method-arguments>
        <argument expression="${flowScope.order}" />
      </method-arguments>
    </bean-action>
    
    <transition on="success" to="finish" />
  </action-state>
  
  <end-state id="finish" 
      view="flowRedirect:PizzaOrder-flow" />

  <!-- 
    Globally transition "cancel" to the "finish" state
    
    As shown on page 608
   -->     
  <global-transitions>
    <transition on="cancel" to="finish" />
  </global-transitions>
</flow>
